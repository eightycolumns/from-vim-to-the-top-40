#include "bus/main-mix"
#include "bus/short-reverb"
#include "oscillator/operator"
#include "plugin/gain"
#include "plugin/hi-pass"
#include "plugin/stereo-width"
#include "util/amp-midi-velo"
#include "util/cps-midi-note"
#include "util/index"

instr HiHat
  iDuration = p3
  iMidiVelo = p4
  iMidiNote = p5

  iOpen = p6

  iDbRange = 24
  iAmp AmpMidiVelo iMidiVelo, iDbRange

  iMinMidiNote = 36
  iMaxMidiNote = 96
  iCps CpsMidiNote iMidiNote, iMinMidiNote, iMaxMidiNote

  iCpsL = iCps * cent(-10)
  aModulatorL Operator iCpsL * 1.4, gaNull, 0
  aModulatorL *= Index(10)
  aCarrierL Operator iCpsL, aModulatorL, 0
  aPitchL = aCarrierL * iAmp

  iCpsR = iCps * cent(+10)
  aModulatorR Operator iCpsR * 1.4, gaNull, 0
  aModulatorR *= Index(10)
  aCarrierR Operator iCpsR, aModulatorR, 0
  aPitchR = aCarrierR * iAmp

  aNoiseFeedbackL init 0
  aNoiseL Operator iCps * cent(-1), aNoiseFeedbackL, 0
  aNoiseFeedbackL = aNoiseL * Index(100)
  aNoiseL *= iAmp

  aNoiseFeedbackR init 0
  aNoiseR Operator iCps * cent(+1), aNoiseFeedbackR, 0
  aNoiseFeedbackR = aNoiseR * Index(100)
  aNoiseR *= iAmp

  if (iOpen == 0) then
    kPitchAmpEnv transeg 1, iDuration, -9, 0
    kNoiseAmpEnv transeg 1, iDuration, -9, 0
  else
    kPitchAmpEnv transeg 1, iDuration, -1, 0
    kNoiseAmpEnv transeg 1, iDuration, -1, 0
  endif

  aOutL = aPitchL * kPitchAmpEnv + aNoiseL * kNoiseAmpEnv
  aOutR = aPitchR * kPitchAmpEnv + aNoiseR * kNoiseAmpEnv

  aOutL, aOutR StereoWidth aOutL, aOutR, 1
  aOutL, aOutR HiPass aOutL, aOutR, 1000
  aOutL, aOutR Gain aOutL, aOutR, -21

  ToShortReverbBus aOutL, aOutR, -12
  ToMainMixBus aOutL, aOutR, 0
endin
